namespace :wp do

  task :set_permissions do
    on roles(:app) do
      execute :chmod, "0644 #{shared_path}/.htaccess"
      execute :chmod, "0640 #{shared_path}/wp-config.php"
      execute :find, "#{shared_path}/content/uploads -type f -exec chmod 0755 {} \;
      execute :find, "#{shared_path}/content/uploads -type d -exec chmod 0660 {} \;
    end
  end

  namespace :setup do

    desc "Generates wp-config.php on remote server"
    task :generate_remote_files do
      on roles(:web) do

        # Get details for WordPress config file
        secret_keys = capture("curl -s -k https://api.wordpress.org/secret-key/1.1/salt")
        wp_siteurl = fetch(:stage_url)
        database = YAML::load_file('config/database.yml')[fetch(:stage).to_s]

        # Create config file in remote environment
        db_config = ERB.new(File.read('config/templates/wp-config.php.erb')).result(binding)
        io = StringIO.new(db_config)
        upload! io, File.join(shared_path, "wp-config.php")

        # Create .htaccess in remote environment
        accessfile = ERB.new(File.read('config/templates/.htaccess.erb')).result(binding)
        io = StringIO.new(accessfile)
        upload! io, File.join(shared_path, ".htaccess")
      end
      # Set some permissions
      invoke 'wp:set_permissions'
    end

    desc "Setup WP on remote environment"
    task :remote do
      invoke 'db:confirm'
      invoke 'deploy'
      invoke 'wp:setup:generate_remote_files'
      on roles(:web) do

        within release_path do

          if !fetch(:setup_all)
            # Generate a random password
            o = [('a'..'z'), ('A'..'Z')].map { |i| i.to_a }.flatten
            password = (0...18).map { o[rand(o.length)] }.join
          else
            password = fetch(:wp_pass)
          end

          # Get WP details from config in /config
          wp_siteurl = fetch(:stage_url)
          title = fetch(:wp_sitename)
          email = fetch(:wp_email)
          user = fetch(:wp_user)

          # Install WordPress
          execute :wp, "core install --url='#{wp_siteurl}' --title='#{title}' --admin_user='#{user}' --admin_password='#{password}' --admin_email='#{email}'"

          if !fetch(:setup_all)
            puts <<-MSG
            \e[32m
            =========================================================================
              WordPress has successfully been installed. Here are your login details:

              Username:       #{user}
              Password:       #{password}
              Email address:  #{email}
              Log in at:      #{wp_siteurl}/wordpress/wp-admin
            =========================================================================
            \e[0m
            MSG
          end

        end

      end
    end

    desc "Setup WP on local environment"
    task :local do

      run_locally do

        if !fetch(:setup_all)
          # Generate a random password
          o = [('a'..'z'), ('A'..'Z')].map { |i| i.to_a }.flatten
          password = (0...18).map { o[rand(o.length)] }.join
        else
          password = fetch(:wp_pass)
        end

        # Get WP details from config in /config
        title = fetch(:wp_sitename)
        email = fetch(:wp_email)
        user = fetch(:wp_user)
        wp_siteurl = fetch(:wp_localurl)

        # Create wp-config.php
        database = YAML::load_file('config/database.yml')['local']
        secret_keys = capture("curl -s -k https://api.wordpress.org/secret-key/1.1/salt")
        db_config = ERB.new(File.read('config/templates/wp-config.php.erb')).result(binding)
        File.open("wp-config.php", 'w') {|f| f.write(db_config) }

        # Install WordPress
        execute :wp, "core install --url='#{wp_siteurl}' --title='#{title}' --admin_user='#{user}' --admin_password='#{password}' --admin_email='#{email}'"

        puts <<-MSG
        \e[32m
        =========================================================================
          WordPress has successfully been installed. Here are your login details:

          Username:       #{user}
          Password:       #{password}
          Email address:  #{email}
        =========================================================================
        \e[0m
        MSG

      end
    end

    desc "Setup WP on remote and local environments"
    task :both do
      set :setup_all, true

      # Generate a random password
      o = [('a'..'z'), ('A'..'Z')].map { |i| i.to_a }.flatten
      password = (0...18).map { o[rand(o.length)] }.join
      set :wp_pass, password

      # Setup remote and local envs
      invoke "wp:setup:remote"
      invoke "wp:setup:local"
    end
  end

  namespace :core do
    desc "Updates the WP core submodule to the latest tag"
    task :update do
      system('
      cd wordpress
      git fetch --tags
      latestTag=$(git tag -l | sort -n -r -t. -k1,1 -k2,2 -k3,3 -k4,4 | sed -n 1p)
      git checkout $latestTag
      ')
      invoke 'cache:repo:purge'
      puts "WordPress submodule is now at the latest version. You should now commit your changes."

    end
  end

end
